datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider     = "prisma-pothos-types"
  clientOutput = "@prisma/client"
  // output       = "./generated.d.ts" // TODO: decide if I should version control this
}

model User {
  id String @id
  // characters Character[] @relation("3")
  // voices     Voice[]     @relation("4")
}

// model Character {
//   id      String  @id
//   photo   String?
//   name    String
//   ownerId String
//   owner   User    @relation(fields: [ownerId], references: [id], name: "3")
//   voices  Voice[] @relation("0")
// }

// // or VoiceModel
// model Voice {
//   id           String      @id
//   photo        String?
//   quality      Float
//   userScore    Float
//   characterId  String
//   AIHubModelId String?
//   parentId     String?
//   ownerId      String
//   chracter     Character   @relation(fields: [characterId], references: [id], name: "0")
//   source       AIHubModel? @relation(fields: [AIHubModelId], references: [id], name: "1")
//   parent       Voice?      @relation(fields: [parentId], references: [id], name: "2")
//   owner        User        @relation(fields: [ownerId], references: [id], name: "4")
//   children     Voice[]     @relation("2")
// }

// model AIHubModel {
//   id            String  @id
//   downloadUrl   String
//   DownloadCount Int
//   displayName   String?
//   filename      String
//   Filesize      Int // Bytes
//   sheetId       String // Unique MD5 id for the realtime rvc stats sheet
//   version       String // Must be "RVC v2" or "RVC v1"
//   credit        String
//   voice         Voice[] @relation("1")
//   // TODO: Figure out what to do with alternate URLs
// }

// model Character {}

// model Human {}

// model VoiceModel {

// }

// model Character {
//   id             String  @id
//   name           String
//   fictional      Boolean
//   genre
//   sourceMaterial

//   voiceModels VoiceModel[] @relation("2")
// }

model VoiceModel {
  id                       String           @id
  // type                     String // RVC v1 | RVC v2
  filesize                 Int // Bytes
  checksumMD5ForAdded      String
  checksumMD5ForWeights    String
  checksumSHA256ForAdded   String
  checksumSHA256ForWeights String
  // characterId              String?
  sourceModelId            String?          @unique
  // character                Character?            @relation(fields: [characterId], references: [id], name: "2")
  sourceModel              VoiceModelAIHub? @relation(fields: [sourceModelId], references: [id], name: "3")
}

model VoiceModelAIHub {
  id            String                @id
  downloadCount Int
  name          String?
  filename      String
  creatorText       String
  version       String // RVC v2 | RVC v1
  derivedModel  VoiceModel?           @relation("3")
  backupUrls    VoiceModelBackupUrl[] @relation("1")
}

// VoiceModelAIHubBackupUrlsConnection

model VoiceModelBackupUrl {
  id           String          @id
  url          String          @unique
  voiceModelId String
  voiceModel   VoiceModelAIHub @relation(fields: [voiceModelId], references: [id], name: "1")
}
