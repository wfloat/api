datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_CONNECTION_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider     = "prisma-pothos-types"
  clientOutput = "@prisma/client"
  output       = "./generated/pothos.d.ts"
}

generator kysely {
  provider = "prisma-kysely"
  output   = "./generated"
  fileName = "kysely.d.ts"
}

// model User {
//   id         String      @id
//   characters Character[] @relation("3")
//   voices     Voice[]     @relation("4")
// }

// model Character {
//   id      String  @id
//   photo   String?
//   name    String
//   ownerId String
//   owner   User    @relation(fields: [ownerId], references: [id], name: "3")
//   voices  Voice[] @relation("0")
// }

// // or VoiceModel
// model Voice {
//   id           String      @id
//   photo        String?
//   quality      Float
//   userScore    Float
//   characterId  String
//   AIHubModelId String?
//   parentId     String?
//   ownerId      String
//   chracter     Character   @relation(fields: [characterId], references: [id], name: "0")
//   source       AIHubModel? @relation(fields: [AIHubModelId], references: [id], name: "1")
//   parent       Voice?      @relation(fields: [parentId], references: [id], name: "2")
//   owner        User        @relation(fields: [ownerId], references: [id], name: "4")
//   children     Voice[]     @relation("2")
// }

// model AIHubModel {
//   id            String  @id
//   downloadUrl   String
//   DownloadCount Int
//   displayName   String?
//   filename      String
//   Filesize      Int // Bytes
//   sheetId       String // Unique MD5 id for the realtime rvc stats sheet
//   version       String // Must be "RVC v2" or "RVC v1"
//   credit        String
//   voice         Voice[] @relation("1")
//   // TODO: Figure out what to do with alternate URLs
// }

// model Character {}

// model Human {}

// model VoiceModel {

// }

// model Character {
//   id             String  @id
//   name           String
//   fictional      Boolean
//   genre
//   sourceMaterial

//   voiceModels VoiceModel[] @relation("2")
// }

model VoiceModel {
  id                       String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  // type                     String // RVC v1 | RVC v2
  filesizeForWeights       Int // Bytes
  filesizeForAdded         Int // Bytes
  hidden                   Boolean
  processed                Boolean
  name                     String
  checksumMD5ForAdded      String            @unique
  checksumMD5ForWeights    String            @unique
  checksumSHA256ForAdded   String            @unique
  checksumSHA256ForWeights String            @unique
  modelConfig              VoiceModelConfig? // ctx.loaders.modelConfigFromVoiceModel.load(id)
  // characterId              String?

  // character                Character?            @relation(fields: [characterId], references: [id], name: "2")
  sourceModel    AIHubVoiceModel? // ctx.loaders.derivedModelFromVoiceModelAIHub.load(id)
  textToSpeeches TextToSpeech[]   @relation("VoiceModelTextToSpeeches")
}

// or "ModelParams"
model VoiceModelConfig {
  id                    String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  qualityScore          Float
  f0Curve               String
  transposePitch        Int
  pitchExtractionMethod String
  searchFeatureRatio    Float
  filterRadius          Int
  audioResampling       Int
  volumeEnvelopeScaling Float
  artifactProtection    Float
  voiceModelId          String     @unique @db.Uuid
  voiceModel            VoiceModel @relation(fields: [voiceModelId], references: [id]) // ctx.loaders.voiceModel.load(voiceModelId)
}

model AIHubVoiceModel {
  id                    String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  downloadCount         Int
  name                  String?
  checksumMD5ForWeights String                @unique
  filename              String
  creatorText           String?
  version               String // RVC v2 | RVC v1
  derivedModelId        String?               @unique @db.Uuid
  derivedModel          VoiceModel?           @relation(fields: [derivedModelId], references: [id]) // ctx.loaders.voiceModelAIHub.load(sourceModelId)  
  backupUrls            VoiceModelBackupUrl[] @relation("AIHubVoiceModelBackupUrls")
  inferredProfile       VoiceModelProfile?    @relation("AIHubVoiceModelProfile")
}

model VoiceModelProfile {
  id                               String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  confidence                       Float
  fictional                        Boolean
  name                             String
  gender                           String // male | female
  relevantTags                     String[]
  accent                           String
  nativeLanguage                   String
  modelTrainedOnEnglishProbability Float
  voiceModelId                     String          @unique @db.Uuid
  voiceModel                       AIHubVoiceModel @relation(fields: [voiceModelId], references: [id], name: "AIHubVoiceModelProfile")
}

// VoiceModelAIHubBackupUrlsConnection

model VoiceModelBackupUrl {
  id           String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  url          String          @unique
  voiceModelId String          @db.Uuid
  voiceModel   AIHubVoiceModel @relation(fields: [voiceModelId], references: [id], name: "AIHubVoiceModelBackupUrls")
}

// Or just "Speech"
model TextToSpeech {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  inputText    String
  ouputUrl     String
  voiceModelId String     @db.Uuid
  voiceModel   VoiceModel @relation(fields: [voiceModelId], references: [id], name: "VoiceModelTextToSpeeches")
}
